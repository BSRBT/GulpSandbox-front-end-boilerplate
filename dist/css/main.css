:root {
  --rowNum: 4;
  --colNum: 5;
  --gridHeight: 100vh;
  --wrapperH: auto;
}
@media only screen {
  :root {
    --colNum: 4;
  }
}
@media only screen and (min-width: 720px) {
  :root {
    --colNum: 8;
  }
}
@media only screen and (min-width: 840px) {
  :root {
    --colNum: 10;
  }
}
@media only screen and (min-width: 1040px) {
  :root {
    --colNum: 12;
  }
}
@media only screen and (min-width: 1440px) {
  :root {
    --colNum: 16;
  }
}
.wrapper {
  height: var(--wrapperH);
}
.wrapper {
  display: -ms-grid;
  display: grid;
  -ms-grid-rows: (var(--gridHeight))[var];
      grid-template-rows: repeat(var(--rowNum), var(--gridHeight));
  -ms-grid-columns: (auto)[var];
      grid-template-columns: repeat(var(--colNum), auto);
}
.grid-item {
  -ms-grid-column: auto;
      grid-column-start: auto;
  -ms-grid-row: auto;
      grid-row-start: auto;
  margin: 5px;
  background-color: #000;
  color: #fff;
  text-align: center;
}
@media only screen {
  .grid-item {
    margin: 12px;
  }
}
@media only screen and (min-width: 720px) {
  .grid-item {
    margin: 16px;
  }
}
@media only screen and (min-width: 840px) {
  .grid-item {
    margin: 16px;
  }
}
@media only screen and (min-width: 1040px) {
  .grid-item {
    margin: 16px;
  }
}
@media only screen and (min-width: 1440px) {
  .grid-item {
    margin: 20px;
  }
}
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
* {
  box-sizing: border-box;
}
html {
  height: 100%;
}
.no-flexbox body {
  min-height: 100%;
  height: 100%;
  display: block !important;
}
.page-wrapper,
.page-footer {
  max-width: none;
  min-width: 0;
  width: 100%;
  margin: 0 auto;
}
.no-flexbox .page-wrapper,
.no-flexbox .page-footer {
  width: auto;
}
.page-wrapper {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  min-height: 100vh;
}
.lte-ie-11 .page-wrapper,
.lt-ie-11 .page-wrapper {
  min-height: 0;
}
.no-flexbox .page-wrapper {
  display: block !important;
  width: auto;
  min-height: 100%;
  height: auto !important;
  height: 100%;
}
.page-body {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}
.page-body.flex-none {
  -webkit-box-flex: 0;
      -ms-flex: none;
          flex: none;
}
.section-main {
  background: url("../img/main-bg.jpg") no-repeat center/cover;
  height: 78vh;
}
html {
  -webkit-font-smoothing: antialiased;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWx1cy10ZW1wbGF0ZXMvbWl4aW5zL2N1c3RvbS1ncmlkLnN0eWwiLCJtYWluLmNzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9ydXB0dXJlL3J1cHR1cmUvaW5kZXguc3R5bCIsInN0eWx1cy10ZW1wbGF0ZXMvbWl4aW5zL3Jlc2V0LnN0eWwiLCJzdHlsdXMtdGVtcGxhdGVzL21peGlucy9zLWZvb3Rlci5zdHlsIiwic3R5bHVzLXRlbXBsYXRlcy9ib2R5LnN0eWwiLCJtYWluLnN0eWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7RUFDRSxZQUFBO0VBQ0EsWUFBQTtFQUNBLG9CQUFBO0VBQ0EsaUJBQUE7Q0NGRDtBQzBJVTtFRnBJVDtJQUNFLFlBQUE7R0NIRDtDQUNGO0FDcUlVO0VGaElUO0lBQ0UsWUFBQTtHQ0ZEO0NBQ0Y7QUNnSVU7RUY3SFQ7SUFDRSxhQUFBO0dDQUQ7Q0FDRjtBQzJIVTtFRjFIVDtJQUNFLGFBQUE7R0NFRDtDQUNGO0FDc0hVO0VGdkhUO0lBQ0UsYUFBQTtHQ0lEO0NBQ0Y7QURERDtFQUNFLHdCQUFBO0NDR0Q7QURBRDtFQUNFLGtCQUFBO0VBQUEsY0FBQTtFQUNBLHdDQUFBO01BQUEsNkRBQUE7RUFDQSw4QkFBQTtNQUFBLG1EQUFBO0NDRUQ7QURDRDtFQUNFLHNCQUFBO01BQUEsd0JBQUE7RUFDQSxtQkFBQTtNQUFBLHFCQUFBO0VBQ0EsWUFBQTtFQUNBLHVCQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQUFBO0NDQ0Q7QUNpR1U7RUFBQTtJRmhHUCxhQUFBO0dDR0Q7Q0FDRjtBQzRGVTtFQUFBO0lGOUZQLGFBQUE7R0NNRDtDQUNGO0FDdUZVO0VBQUE7SUY1RlAsYUFBQTtHQ1NEO0NBQ0Y7QUNrRlU7RUFBQTtJRjFGUCxhQUFBO0dDWUQ7Q0FDRjtBQzZFVTtFQUFBO0lGeEZQLGFBQUE7R0NlRDtDQUNGO0FFdkVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFhRSxVQUFBO0VBQ0EsV0FBQTtFQUNBLFVBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7RUFDQSx5QkFBQTtDRjZJRDtBRTNJRDs7Ozs7Ozs7Ozs7RUFFRSxlQUFBO0NGc0pEO0FFcEpEO0VBQ0UsZUFBQTtDRnNKRDtBRXBKRDs7RUFDRSxpQkFBQTtDRnVKRDtBRXJKRDs7RUFDRSxhQUFBO0NGd0pEO0FFdEpEOzs7O0VBRUUsWUFBQTtFQUNBLGNBQUE7Q0YwSkQ7QUV4SkQ7RUFDRSwwQkFBQTtFQUNBLGtCQUFBO0NGMEpEO0FFeEpEO0VBQ0UsdUJBQUE7Q0YwSkQ7QUduTUQ7RUFDRSxhQUFBO0NIcU1EO0FHbk1DO0VBQ0UsaUJBQUE7RUFDQSxhQUFBO0VBQ0EsMEJBQUE7Q0hxTUg7QUdwTUQ7O0VBQ0UsZ0JBQUE7RUFDQSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGVBQUE7Q0h1TUQ7QUd0TUM7O0VBQ0UsWUFBQTtDSHlNSDtBR3hNRDtFQUNFLHFCQUFBO0VBQUEscUJBQUE7RUFBQSxjQUFBO0VBQ0EsNkJBQUE7RUFBQSw4QkFBQTtNQUFBLDJCQUFBO1VBQUEsdUJBQUE7RUFDQSxrQkFBQTtDSDBNRDtBR3pNQzs7RUFDRSxjQUFBO0NINE1IO0FHM01DO0VBQ0UsMEJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSx3QkFBQTtFQUNBLGFBQUE7Q0g2TUg7QUc1TUQ7RUFDRSxvQkFBQTtNQUFBLFlBQUE7VUFBQSxRQUFBO0NIOE1EO0FHN01DO0VBQ0Usb0JBQUE7TUFBQSxlQUFBO1VBQUEsV0FBQTtDSCtNSDtBSTNPRDtFQUNFLDZEQUFBO0VBQ0EsYUFBQTtDSjZPRDtBSzNPRDtFQUNDLG9DQUFBO0NMNk9BIiwiZmlsZSI6Im1haW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsicnVwdHVyZS5zY2FsZSA9IDAgNDgwcHggNzIwcHggODQwcHggMTA0MHB4IDEyODBweCAxNDQwcHggMTYwMHB4XG4vLyBydXB0dXJlLnNjYWxlLW5hbWVzID0gJ3hzJyAncycgJ20nICdsJyAneGwnXG5cbjpyb290XG4gIC0tcm93TnVtIDRcbiAgLS1jb2xOdW0gNVxuICAtLWdyaWRIZWlnaHQgMTAwdmhcbiAgLS13cmFwcGVySCBhdXRvXG5cblxuK2Zyb20td2lkdGgoMSlcbiAgOnJvb3RcbiAgICAtLWNvbE51bSA0XG5cbitmcm9tLXdpZHRoKDMpXG4gIDpyb290XG4gICAgLS1jb2xOdW0gOFxuK2Zyb20td2lkdGgoNClcbiAgOnJvb3RcbiAgICAtLWNvbE51bSAxMFxuK2Zyb20td2lkdGgoNSlcbiAgOnJvb3RcbiAgICAtLWNvbE51bSAxMlxuK2Zyb20td2lkdGgoNylcbiAgOnJvb3RcbiAgICAtLWNvbE51bSAxNlxuXG5cblxuLndyYXBwZXJcbiAgaGVpZ2h0IHZhcigtLXdyYXBwZXJIKVxuXG5cbi53cmFwcGVyXG4gIGRpc3BsYXkgZ3JpZFxuICBncmlkLXRlbXBsYXRlLXJvd3MgcmVwZWF0KHZhcigtLXJvd051bSksIHZhcigtLWdyaWRIZWlnaHQpKVxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnMgcmVwZWF0KHZhcigtLWNvbE51bSksIGF1dG8pXG5cblxuLmdyaWQtaXRlbVxuICBncmlkLWNvbHVtbi1zdGFydCBhdXRvXG4gIGdyaWQtcm93LXN0YXJ0IGF1dG9cbiAgbWFyZ2luIDVweFxuICBiYWNrZ3JvdW5kLWNvbG9yICMwMDBcbiAgY29sb3IgI2ZmZlxuICB0ZXh0LWFsaWduIGNlbnRlclxuICArZnJvbS13aWR0aCgxKVxuICAgIG1hcmdpbiAxMnB4XG4gICtmcm9tLXdpZHRoKDMpXG4gICAgbWFyZ2luIDE2cHhcbiAgK2Zyb20td2lkdGgoNClcbiAgICBtYXJnaW4gMTZweFxuICArZnJvbS13aWR0aCg1KVxuICAgIG1hcmdpbiAxNnB4XG4gICtmcm9tLXdpZHRoKDcpXG4gICAgbWFyZ2luIDIwcHhcblxuXG5cbi8vIC5ydXB0dXJlLWNvbnRhaW5lclxuLy8gICBkaXNwbGF5IGZsZXhcbi8vICAgbWFyZ2luIDAgYXV0b1xuLy8gICArZnJvbS13aWR0aCgxKVxuLy8gICAgIHdpZHRoIDEwMCVcbi8vICAgK2Zyb20td2lkdGgoMilcbi8vICAgICB3aWR0aCA0ODBweFxuLy8gICArZnJvbS13aWR0aCgzKVxuLy8gICAgIHdpZHRoIDcyMHB4XG4vLyAgICtmcm9tLXdpZHRoKDQpXG4vLyAgICAgd2lkdGggODQwcHhcbi8vICAgK2Zyb20td2lkdGgoNSlcbi8vICAgICB3aWR0aCAxMDQwcHhcbi8vICAgK2Zyb20td2lkdGgoNilcbi8vICAgICB3aWR0aCAxMjgwcHhcbi8vICAgK2Zyb20td2lkdGgoNylcbi8vICAgICB3aWR0aCAxNDQwcHhcbi8vICAgK2Zyb20td2lkdGgoOClcbi8vICAgICB3aWR0aCAxNjAwcHhcbi8vXG4vLyAucnVwdHVyZS1jb2xcbi8vICAgYmFja2dyb3VuZC1jb2xvciAjYmFkYTU1XG4vLyAgIGZsZXggMVxuLy8gICArZnJvbS13aWR0aCgxKVxuLy8gICAgIHdpZHRoIHBlcmNlbnRhZ2UoLjI1KVxuLy8gICAgIHBhZGRpbmcgMCAxMnB4XG4vLyAgICtmcm9tLXdpZHRoKDMpXG4vLyAgICAgd2lkdGggY2FsYygxMDAlIC8gOClcbi8vICAgICBwYWRkaW5nIDAgMTZweFxuLy8gICArZnJvbS13aWR0aCg0KVxuLy8gICAgIHdpZHRoIGNhbGMoMTAwJSAvIDEwKVxuLy8gICAgIHBhZGRpbmcgMCAxNnB4XG4vLyAgICtmcm9tLXdpZHRoKDUpXG4vLyAgICAgd2lkdGggY2FsYygxMDAlIC8gMTIpXG4vLyAgICAgcGFkZGluZyAwIDE2cHhcbi8vICAgK2Zyb20td2lkdGgoNylcbi8vICAgICB3aWR0aCBjYWxjKDEwMCUgLyAxNilcbi8vICAgICBwYWRkaW5nIDAgMjBweFxuIiwiOnJvb3Qge1xuICAtLXJvd051bTogNDtcbiAgLS1jb2xOdW06IDU7XG4gIC0tZ3JpZEhlaWdodDogMTAwdmg7XG4gIC0td3JhcHBlckg6IGF1dG87XG59XG5AbWVkaWEgb25seSBzY3JlZW4ge1xuICA6cm9vdCB7XG4gICAgLS1jb2xOdW06IDQ7XG4gIH1cbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzIwcHgpIHtcbiAgOnJvb3Qge1xuICAgIC0tY29sTnVtOiA4O1xuICB9XG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDg0MHB4KSB7XG4gIDpyb290IHtcbiAgICAtLWNvbE51bTogMTA7XG4gIH1cbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTA0MHB4KSB7XG4gIDpyb290IHtcbiAgICAtLWNvbE51bTogMTI7XG4gIH1cbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQ0MHB4KSB7XG4gIDpyb290IHtcbiAgICAtLWNvbE51bTogMTY7XG4gIH1cbn1cbi53cmFwcGVyIHtcbiAgaGVpZ2h0OiB2YXIoLS13cmFwcGVySCk7XG59XG4ud3JhcHBlciB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KHZhcigtLXJvd051bSksIHZhcigtLWdyaWRIZWlnaHQpKTtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQodmFyKC0tY29sTnVtKSwgYXV0byk7XG59XG4uZ3JpZC1pdGVtIHtcbiAgZ3JpZC1jb2x1bW4tc3RhcnQ6IGF1dG87XG4gIGdyaWQtcm93LXN0YXJ0OiBhdXRvO1xuICBtYXJnaW46IDVweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiB7XG4gIC5ncmlkLWl0ZW0ge1xuICAgIG1hcmdpbjogMTJweDtcbiAgfVxufVxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3MjBweCkge1xuICAuZ3JpZC1pdGVtIHtcbiAgICBtYXJnaW46IDE2cHg7XG4gIH1cbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogODQwcHgpIHtcbiAgLmdyaWQtaXRlbSB7XG4gICAgbWFyZ2luOiAxNnB4O1xuICB9XG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwNDBweCkge1xuICAuZ3JpZC1pdGVtIHtcbiAgICBtYXJnaW46IDE2cHg7XG4gIH1cbn1cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQ0MHB4KSB7XG4gIC5ncmlkLWl0ZW0ge1xuICAgIG1hcmdpbjogMjBweDtcbiAgfVxufVxuaHRtbCxcbmJvZHksXG5kaXYsXG5zcGFuLFxuYXBwbGV0LFxub2JqZWN0LFxuaWZyYW1lLFxuaDEsXG5oMixcbmgzLFxuaDQsXG5oNSxcbmg2LFxucCxcbmJsb2NrcXVvdGUsXG5wcmUsXG5hLFxuYWJicixcbmFjcm9ueW0sXG5hZGRyZXNzLFxuYmlnLFxuY2l0ZSxcbmNvZGUsXG5kZWwsXG5kZm4sXG5lbSxcbmltZyxcbmlucyxcbmtiZCxcbnEsXG5zLFxuc2FtcCxcbnNtYWxsLFxuc3RyaWtlLFxuc3Ryb25nLFxuc3ViLFxuc3VwLFxudHQsXG52YXIsXG5iLFxudSxcbmksXG5jZW50ZXIsXG5kbCxcbmR0LFxuZGQsXG5vbCxcbnVsLFxubGksXG5maWVsZHNldCxcbmZvcm0sXG5sYWJlbCxcbmxlZ2VuZCxcbnRhYmxlLFxuY2FwdGlvbixcbnRib2R5LFxudGZvb3QsXG50aGVhZCxcbnRyLFxudGgsXG50ZCxcbmFydGljbGUsXG5hc2lkZSxcbmNhbnZhcyxcbmRldGFpbHMsXG5lbWJlZCxcbmZpZ3VyZSxcbmZpZ2NhcHRpb24sXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxub3V0cHV0LFxucnVieSxcbnNlY3Rpb24sXG5zdW1tYXJ5LFxudGltZSxcbm1hcmssXG5hdWRpbyxcbnZpZGVvIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udDogaW5oZXJpdDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxuc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxub2wsXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5ibG9ja3F1b3RlLFxucSB7XG4gIHF1b3Rlczogbm9uZTtcbn1cbmJsb2NrcXVvdGU6YmVmb3JlLFxuYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLFxucTphZnRlciB7XG4gIGNvbnRlbnQ6ICcnO1xuICBjb250ZW50OiBub25lO1xufVxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuaHRtbCB7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5uby1mbGV4Ym94IGJvZHkge1xuICBtaW4taGVpZ2h0OiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XG59XG4ucGFnZS13cmFwcGVyLFxuLnBhZ2UtZm9vdGVyIHtcbiAgbWF4LXdpZHRoOiBub25lO1xuICBtaW4td2lkdGg6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW46IDAgYXV0bztcbn1cbi5uby1mbGV4Ym94IC5wYWdlLXdyYXBwZXIsXG4ubm8tZmxleGJveCAucGFnZS1mb290ZXIge1xuICB3aWR0aDogYXV0bztcbn1cbi5wYWdlLXdyYXBwZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbn1cbi5sdGUtaWUtMTEgLnBhZ2Utd3JhcHBlcixcbi5sdC1pZS0xMSAucGFnZS13cmFwcGVyIHtcbiAgbWluLWhlaWdodDogMDtcbn1cbi5uby1mbGV4Ym94IC5wYWdlLXdyYXBwZXIge1xuICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICB3aWR0aDogYXV0bztcbiAgbWluLWhlaWdodDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5wYWdlLWJvZHkge1xuICBmbGV4OiAxO1xufVxuLnBhZ2UtYm9keS5mbGV4LW5vbmUge1xuICBmbGV4OiBub25lO1xufVxuLnNlY3Rpb24tbWFpbiB7XG4gIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9tYWluLWJnLmpwZ1wiKSBuby1yZXBlYXQgY2VudGVyL2NvdmVyO1xuICBoZWlnaHQ6IDc4dmg7XG59XG5odG1sIHtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG59XG4iLCJiYXNlLWZvbnQtc2l6ZSA/PSAxNnB4XG5yYXN0ZXJpc2UtbWVkaWEtcXVlcmllcyA/PSBmYWxzZVxuXG5ydXB0dXJlID0ge1xuICByYXN0ZXJpc2UtbWVkaWEtcXVlcmllczogcmFzdGVyaXNlLW1lZGlhLXF1ZXJpZXNcbiAgbW9iaWxlLWN1dG9mZjogNDAwcHhcbiAgZGVza3RvcC1jdXRvZmY6IDEwNTBweFxuICBoZC1jdXRvZmY6IDE4MDBweFxuICBlbmFibGUtZW0tYnJlYWtwb2ludHM6IGZhbHNlXG4gIGJhc2UtZm9udC1zaXplOiBiYXNlLWZvbnQtc2l6ZVxuICBhbnRpLW92ZXJsYXA6IGZhbHNlXG4gIGRlbnNpdHktcXVlcmllczogJ2RwcHgnICd3ZWJraXQnICdtb3onICdkcGknXG4gIHJldGluYS1kZW5zaXR5OiAxLjVcbiAgdXNlLWRldmljZS13aWR0aDogZmFsc2Vcbn1cbnJ1cHR1cmUuc2NhbGUgPSAwIChydXB0dXJlLm1vYmlsZS1jdXRvZmYpIDYwMHB4IDgwMHB4IChydXB0dXJlLmRlc2t0b3AtY3V0b2ZmKSAocnVwdHVyZS5oZC1jdXRvZmYpXG5ydXB0dXJlLnNjYWxlLW5hbWVzID0gJ3hzJyAncycgJ20nICdsJyAneGwnICdoZCdcblxuLWlzLXN0cmluZyh2YWwpXG4gIGlmIHR5cGVvZih2YWwpIGlzIG5vdCAndW5pdCdcbiAgICBpZiB2YWwgaXMgYSAnc3RyaW5nJyBvciB2YWwgaXMgYSAnaWRlbnQnXG4gICAgICB0cnVlXG4gICAgZWxzZVxuICAgICAgZmFsc2VcbiAgZWxzZVxuICAgIGZhbHNlXG5cbi1nZXQtc2NhbGUtbnVtYmVyKHNjYWxlLW5hbWUpXG4gIGZvciBsaXN0LWl0ZW0sIGkgaW4gcnVwdHVyZS5zY2FsZS1uYW1lc1xuICAgIGlmIGxpc3QtaXRlbSBpcyBzY2FsZS1uYW1lXG4gICAgICByZXR1cm4gaSArIDFcbiAgcmV0dXJuIGZhbHNlXG5cbi1jb252ZXJ0LXRvKHRvLXVuaXQsIHZhbHVlLCBjb250ZXh0ID0gcnVwdHVyZS5iYXNlLWZvbnQtc2l6ZSlcbiAgZnJvbS11bml0ID0gdW5pdCh2YWx1ZSlcbiAgcmV0dXJuIHZhbHVlIGlmIHRvLXVuaXQgaXMgZnJvbS11bml0XG4gIGlmIHRvLXVuaXQgaW4gKCdlbScgJ3JlbScpXG4gICAgcmV0dXJuIHZhbHVlIGlmIGZyb20tdW5pdCBpbiAoJ2VtJyAncmVtJylcbiAgICByZXR1cm4gdW5pdCgodmFsdWUgLyBjb250ZXh0KSwgdG8tdW5pdClcbiAgaWYgdG8tdW5pdCBpcyAncHgnXG4gICAgcmV0dXJuIHVuaXQoKHZhbHVlICogY29udGV4dCksICdweCcpXG5cbi1vbi1zY2FsZShuKVxuICByZXR1cm4gdW5pdChuKSBpcyAnJ1xuXG4tbGFyZ2VyLXRoYW4tc2NhbGUobilcbiAgcmV0dXJuIChuID4gKGxlbmd0aChydXB0dXJlLnNjYWxlKSAtIDEpKSBhbmQgLW9uLXNjYWxlKG4pXG5cbi1pcy16ZXJvKG4pXG4gIHJldHVybiBuIGlzIDBcblxuLW92ZXJsYXAtc2hpZnQoYW50aS1vdmVybGFwLCBuKVxuICBzaGlmdC11bml0ID0gdW5pdChuKVxuICBhbnRpLW92ZXJsYXAgPSAwcHggdW5sZXNzIGFudGktb3ZlcmxhcFxuICBhbnRpLW92ZXJsYXAgPSAxcHggaWYgYW50aS1vdmVybGFwIGlzIHRydWVcbiAgaWYgbGVuZ3RoKGFudGktb3ZlcmxhcCkgaXMgMVxuICAgIHJldHVybiAtY29udmVydC10byhzaGlmdC11bml0LCBhbnRpLW92ZXJsYXApXG4gIGZvciB2YWwgaW4gYW50aS1vdmVybGFwXG4gICAgcmV0dXJuIHZhbCBpZiB1bml0KHZhbCkgaXMgc2hpZnQtdW5pdFxuXG4tYWRqdXN0LW92ZXJsYXAoYW50aS1vdmVybGFwLCBuLCBzaWRlID0gJ21pbicpXG4gIC1zaGlmdCA9IC1vdmVybGFwLXNoaWZ0KGFudGktb3ZlcmxhcCwgbilcbiAgaWYgKHNpZGUgaXMgJ21pbicgYW5kIC1zaGlmdCA+IDApIG9yIChzaWRlIGlzICdtYXgnIGFuZCAtc2hpZnQgPCAwKVxuICAgIG4gPSBuICsgLXNoaWZ0XG4gIHJldHVybiBuXG5cbi1pcy1wb3NpdGl2ZShuKVxuICByZXR1cm4gbiA+PSAwXG5cbi1kZW5zaXR5LXF1ZXJpZXMoZGVuc2l0eSlcbiAgaWYgdHlwZW9mKGRlbnNpdHkpIGlzIG5vdCAndW5pdCdcbiAgICBpZiBub3QgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgICAgZGVuc2l0eSA9ICclcycgJSBkZW5zaXR5XG4gIGRlbnNpdHkgPSBydXB0dXJlLnJldGluYS1kZW5zaXR5IGlmIGRlbnNpdHkgaXMgJ3JldGluYSdcbiAgcXVlcmllcyA9ICgpXG4gIGZvciBxdWVyeSBpbiBydXB0dXJlLmRlbnNpdHktcXVlcmllc1xuICAgIGlmIHF1ZXJ5IGlzICd3ZWJraXQnXG4gICAgICBwdXNoKHF1ZXJpZXMsICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAlcyknICUgKGRlbnNpdHkpKVxuICAgIGVsc2UgaWYgcXVlcnkgaXMgJ21veidcbiAgICAgIHB1c2gocXVlcmllcywgJyhtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86ICVzKScgJSAoZGVuc2l0eSkpXG4gICAgZWxzZSBpZiBxdWVyeSBpcyAnbydcbiAgICAgIHB1c2gocXVlcmllcywgJygtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAlcy8xKScgJSAoZGVuc2l0eSkpXG4gICAgZWxzZSBpZiBxdWVyeSBpcyAncmF0aW8nXG4gICAgICBwdXNoKHF1ZXJpZXMsICcobWluLWRldmljZS1waXhlbC1yYXRpbzogJXMpJyAlIChkZW5zaXR5KSlcbiAgICBlbHNlIGlmIHF1ZXJ5IGlzICdkcGknXG4gICAgICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgICAgIGRlbnNpdHk9Y29udmVydChkZW5zaXR5KVxuICAgICAgcHVzaChxdWVyaWVzLCAnKG1pbi1yZXNvbHV0aW9uOiAlc2RwaSknICUgKHJvdW5kKGRlbnNpdHkgKiA5NiwgMSkpKVxuICAgIGVsc2UgaWYgcXVlcnkgaXMgJ2RwcHgnXG4gICAgICBwdXNoKHF1ZXJpZXMsICcobWluLXJlc29sdXRpb246ICVzZHBweCknICUgKGRlbnNpdHkpKVxuICByZXR1cm4gcXVlcmllc1xuXG5jcmVhdGUtZmFsbGJhY2stY2xhc3Moc2VsZWN0ZWQsIGNsYXNzKVxuICAveycnICsgY2xhc3MgKyAnICcgKyBzZWxlY3RlZH1cbiAgICB7YmxvY2t9XG5cbi8vICtiZXR3ZWVuKG1pbiwgbWF4KVxuLy8gdXNhZ2UgKHNjYWxlIGNhbiBiZSBtaXhlZCB3aXRoIGN1c3RvbSB2YWx1ZXMpOlxuLy8gICAtICtiZXR3ZWVuKDEsIDMpIHNjYWxlOnNjYWxlXG4vLyAgIC0gK2JldHdlZW4oMCwgMykgMCB3aWR0aDpzY2FsZVxuLy8gICAtICtiZXR3ZWVuKDIwMHB4LCA1MDBweCkgY3VzdG9tOmN1c3RvbVxuLy8gICAtICtiZXR3ZWVuKDAsIDMwMHB4KSAwIHdpZHRoOmN1c3RvbVxuLy8gICAtICtiZXR3ZWVuKDEsIDMwMHB4KSBzY2FsZTpjdXN0b21cbi8vICAgLSArYmV0d2VlbigyMDBweCwgNCkgY3VzdG9tOnNjYWxlXG5cbmJldHdlZW4obWluLCBtYXgsIGFudGktb3ZlcmxhcCA9IHJ1cHR1cmUuYW50aS1vdmVybGFwLCBkZW5zaXR5ID0gbnVsbCwgb3JpZW50YXRpb24gPSBudWxsLCB1c2UtZGV2aWNlLXdpZHRoID0gcnVwdHVyZS51c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIHNlbGVjdGVkID0gc2VsZWN0b3IoKVxuXG4gIGlmIC1pcy1zdHJpbmcob3JpZW50YXRpb24pXG4gICAgb3JpZW50YXRpb24gPSBjb252ZXJ0KG9yaWVudGF0aW9uKVxuICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgZGVuc2l0eSA9IGNvbnZlcnQoZGVuc2l0eSlcbiAgaWYgLWlzLXN0cmluZyhtaW4pXG4gICAgbWluID0gLWdldC1zY2FsZS1udW1iZXIobWluKVxuICBpZiAtaXMtc3RyaW5nKG1heClcbiAgICBtYXggPSAtZ2V0LXNjYWxlLW51bWJlcihtYXgpXG5cbiAgLW1pbiA9IHJ1cHR1cmUuc2NhbGVbbWluIC0gMV0gdW5sZXNzIC1pcy16ZXJvKG1pbikgb3IgKG5vdCAtb24tc2NhbGUobWluKSlcbiAgLW1heCA9IHJ1cHR1cmUuc2NhbGVbbWF4XSB1bmxlc3Mgbm90IC1vbi1zY2FsZShtYXgpXG4gIC1taW4gPz0gbWluXG4gIC1tYXggPz0gbWF4XG5cbiAgaWYgKHJ1cHR1cmUucmFzdGVyaXNlLW1lZGlhLXF1ZXJpZXMpXG4gICAgaWYgbm90IChkZW5zaXR5IG9yIC1tYXggb3Igb3JpZW50YXRpb24pXG4gICAgICB7YmxvY2t9XG4gIGVsc2VcbiAgICBjb25kaXRpb24gPSAnb25seSBzY3JlZW4nXG4gICAgdXNlLWRldmljZS13aWR0aCA9IHVzZS1kZXZpY2Utd2lkdGggPyAnZGV2aWNlLScgOiAnJ1xuICAgIHVubGVzcyAtbWluIGlzIDBcbiAgICAgIC1taW4gPSAtY29udmVydC10bygnZW0nLCAtbWluKSBpZiBydXB0dXJlLmVuYWJsZS1lbS1icmVha3BvaW50c1xuICAgICAgLW1pbiA9IC1hZGp1c3Qtb3ZlcmxhcChhbnRpLW92ZXJsYXAsIC1taW4sIHNpZGU6ICdtaW4nKVxuICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uICsgJyBhbmQgKG1pbi0nICsgdXNlLWRldmljZS13aWR0aCArICd3aWR0aDogJXMpJyAlICgtbWluKVxuICAgIHVubGVzcyAtbGFyZ2VyLXRoYW4tc2NhbGUobWF4KVxuICAgICAgLW1heCA9IC1jb252ZXJ0LXRvKCdlbScsIC1tYXgpIGlmIHJ1cHR1cmUuZW5hYmxlLWVtLWJyZWFrcG9pbnRzXG4gICAgICAtbWF4ID0gLWFkanVzdC1vdmVybGFwKGFudGktb3ZlcmxhcCwgLW1heCwgc2lkZTogJ21heCcpXG4gICAgICBjb25kaXRpb24gPSBjb25kaXRpb24gKyAnIGFuZCAobWF4LScgKyB1c2UtZGV2aWNlLXdpZHRoICsgJ3dpZHRoOiAlcyknICUgKC1tYXgpXG4gICAgaWYgb3JpZW50YXRpb25cbiAgICAgIGNvbmRpdGlvbiA9IGNvbmRpdGlvbiArICcgYW5kIChvcmllbnRhdGlvbjogJXMpJyAlIChvcmllbnRhdGlvbilcbiAgICBpZiBkZW5zaXR5XG4gICAgICBjb25kaXRpb25zID0gKClcbiAgICAgIGZvciBxdWVyeSBpbiAtZGVuc2l0eS1xdWVyaWVzKGRlbnNpdHkpXG4gICAgICAgIHB1c2goY29uZGl0aW9ucywgY29uZGl0aW9uICsgJyBhbmQgJXMnICUgKHF1ZXJ5KSlcbiAgICAgIGNvbmRpdGlvbiA9IGpvaW4oJywgJywgY29uZGl0aW9ucylcbiAgICBAbWVkaWEgY29uZGl0aW9uXG4gICAgICB7YmxvY2t9XG4gIGlmIGZhbGxiYWNrLWNsYXNzXG4gICAgK2NyZWF0ZS1mYWxsYmFjay1jbGFzcyhzZWxlY3RlZCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICB7YmxvY2t9XG5cbmF0KHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICtiZXR3ZWVuKHNjYWxlLXBvaW50LCBzY2FsZS1wb2ludCwgYW50aS1vdmVybGFwLCBkZW5zaXR5LCBvcmllbnRhdGlvbiwgdXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MpXG4gICAge2Jsb2NrfVxuXG5mcm9tLXdpZHRoKHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICtiZXR3ZWVuKHNjYWxlLXBvaW50LCBsZW5ndGgocnVwdHVyZS5zY2FsZSksIGFudGktb3ZlcmxhcCwgZGVuc2l0eSwgb3JpZW50YXRpb24sIHVzZS1kZXZpY2Utd2lkdGgsIGZhbGxiYWNrLWNsYXNzKVxuICAgIHtibG9ja31cblxuYWJvdmUgPSBmcm9tLXdpZHRoXG5cbnRvLXdpZHRoKHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICtiZXR3ZWVuKDEsIHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAsIGRlbnNpdHksIG9yaWVudGF0aW9uLCB1c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmJlbG93ID0gdG8td2lkdGhcblxubW9iaWxlKGFudGktb3ZlcmxhcCA9IHJ1cHR1cmUuYW50aS1vdmVybGFwLCBkZW5zaXR5ID0gbnVsbCwgb3JpZW50YXRpb24gPSBudWxsLCB1c2UtZGV2aWNlLXdpZHRoID0gcnVwdHVyZS51c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIGlmIC1pcy1zdHJpbmcob3JpZW50YXRpb24pXG4gICAgb3JpZW50YXRpb24gPSBjb252ZXJ0KG9yaWVudGF0aW9uKVxuICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgZGVuc2l0eSA9IGNvbnZlcnQoZGVuc2l0eSlcbiAgK2JlbG93KHJ1cHR1cmUubW9iaWxlLWN1dG9mZiwgYW50aS1vdmVybGFwLCBkZW5zaXR5LCBvcmllbnRhdGlvbiwgdXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MpXG4gICAge2Jsb2NrfVxuXG50YWJsZXQoYW50aS1vdmVybGFwID0gcnVwdHVyZS5hbnRpLW92ZXJsYXAsIGRlbnNpdHkgPSBudWxsLCBvcmllbnRhdGlvbiA9IG51bGwsIHVzZS1kZXZpY2Utd2lkdGggPSBydXB0dXJlLnVzZS1kZXZpY2Utd2lkdGgsIGZhbGxiYWNrLWNsYXNzID0gbnVsbClcbiAgaWYgLWlzLXN0cmluZyhvcmllbnRhdGlvbilcbiAgICBvcmllbnRhdGlvbiA9IGNvbnZlcnQob3JpZW50YXRpb24pXG4gIGlmIC1pcy1zdHJpbmcoZGVuc2l0eSlcbiAgICBkZW5zaXR5ID0gY29udmVydChkZW5zaXR5KVxuICArYmV0d2VlbihydXB0dXJlLm1vYmlsZS1jdXRvZmYsIHJ1cHR1cmUuZGVza3RvcC1jdXRvZmYsIGFudGktb3ZlcmxhcCwgZGVuc2l0eSwgb3JpZW50YXRpb24sIHVzZS1kZXZpY2Utd2lkdGgsIGZhbGxiYWNrLWNsYXNzKVxuICAgIHtibG9ja31cblxuZGVza3RvcChhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICthYm92ZShydXB0dXJlLmRlc2t0b3AtY3V0b2ZmLCBhbnRpLW92ZXJsYXAsIGRlbnNpdHksIG9yaWVudGF0aW9uLCB1c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmhkKGFudGktb3ZlcmxhcCA9IHJ1cHR1cmUuYW50aS1vdmVybGFwLCBkZW5zaXR5ID0gbnVsbCwgb3JpZW50YXRpb24gPSBudWxsLCB1c2UtZGV2aWNlLXdpZHRoID0gcnVwdHVyZS51c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIGlmIC1pcy1zdHJpbmcob3JpZW50YXRpb24pXG4gICAgb3JpZW50YXRpb24gPSBjb252ZXJ0KG9yaWVudGF0aW9uKVxuICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgZGVuc2l0eSA9IGNvbnZlcnQoZGVuc2l0eSlcbiAgK2Fib3ZlKHJ1cHR1cmUuaGQtY3V0b2ZmLCBhbnRpLW92ZXJsYXAsIGRlbnNpdHksIG9yaWVudGF0aW9uLCB1c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmRlbnNpdHkoZGVuc2l0eSwgb3JpZW50YXRpb24gPSBudWxsLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIHNlbGVjdGVkID0gc2VsZWN0b3IoKVxuICBpZiBub3QgKHJ1cHR1cmUucmFzdGVyaXNlLW1lZGlhLXF1ZXJpZXMpXG4gICAgY29uZGl0aW9ucyA9ICgpXG4gICAgZm9yIHF1ZXJ5IGluIC1kZW5zaXR5LXF1ZXJpZXMoZGVuc2l0eSlcbiAgICAgIGNvbmRpdGlvbiA9ICdvbmx5IHNjcmVlbiBhbmQgJXMnICUgKHF1ZXJ5KVxuICAgICAgaWYgb3JpZW50YXRpb25cbiAgICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uICsgJyBhbmQgKG9yaWVudGF0aW9uOiAlcyknICUgKG9yaWVudGF0aW9uKVxuICAgICAgcHVzaChjb25kaXRpb25zLCBjb25kaXRpb24pXG4gICAgY29uZGl0aW9uID0gam9pbignLCAnLCBjb25kaXRpb25zKVxuICAgIEBtZWRpYSBjb25kaXRpb25cbiAgICAgIHtibG9ja31cbiAgICBpZiBmYWxsYmFjay1jbGFzc1xuICAgICAgK2NyZWF0ZS1mYWxsYmFjay1jbGFzcyhzZWxlY3RlZCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICAgIHtibG9ja31cblxucGl4ZWwtcmF0aW8gPSBkZW5zaXR5XG5cbnJldGluYShvcmllbnRhdGlvbiA9IG51bGwsIGZhbGxiYWNrLWNsYXNzID0gbnVsbClcbiAgK2RlbnNpdHkoJ3JldGluYScsIG9yaWVudGF0aW9uLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmxhbmRzY2FwZShkZW5zaXR5ID0gbnVsbCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBzZWxlY3RlZCA9IHNlbGVjdG9yKClcbiAgaWYgbm90IChydXB0dXJlLnJhc3RlcmlzZS1tZWRpYS1xdWVyaWVzKVxuICAgIGlmIC1pcy1zdHJpbmcoZGVuc2l0eSlcbiAgICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICAgaWYgZGVuc2l0eVxuICAgICAgK3BpeGVsLXJhdGlvKGRlbnNpdHksIG9yaWVudGF0aW9uOiBsYW5kc2NhcGUsIGZhbGxiYWNrLWNsYXNzKVxuICAgICAgICB7YmxvY2t9XG4gICAgZWxzZVxuICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcbiAgICAgICAge2Jsb2NrfVxuICAgICAgaWYgZmFsbGJhY2stY2xhc3NcbiAgICAgICAgK2NyZWF0ZS1mYWxsYmFjay1jbGFzcyhzZWxlY3RlZCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICAgICAge2Jsb2NrfVxuXG5wb3J0cmFpdChkZW5zaXR5ID0gbnVsbCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBzZWxlY3RlZCA9IHNlbGVjdG9yKClcbiAgaWYgbm90IChydXB0dXJlLnJhc3RlcmlzZS1tZWRpYS1xdWVyaWVzKVxuICAgIGlmIC1pcy1zdHJpbmcoZGVuc2l0eSlcbiAgICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICAgaWYgZGVuc2l0eVxuICAgICAgK3BpeGVsLXJhdGlvKGRlbnNpdHksIG9yaWVudGF0aW9uOiBwb3J0cmFpdCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICAgIHtibG9ja31cbiAgICBlbHNlXG4gICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpXG4gICAgICAgIHtibG9ja31cbiAgICAgIGlmIGZhbGxiYWNrLWNsYXNzXG4gICAgICAgICtjcmVhdGUtZmFsbGJhY2stY2xhc3Moc2VsZWN0ZWQsIGZhbGxiYWNrLWNsYXNzKVxuICAgICAgICAgIHtibG9ja31cbiIsImh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW9cbiAgbWFyZ2luIDBcbiAgcGFkZGluZyAwXG4gIGJvcmRlciAwXG4gIGZvbnQtc2l6ZSAxMDAlXG4gIGZvbnQgaW5oZXJpdFxuICB2ZXJ0aWNhbC1hbGlnbiBiYXNlbGluZVxuXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uXG4gIGRpc3BsYXkgYmxvY2tcblxuYm9keVxuICBsaW5lLWhlaWdodCAxXG5cbm9sLCB1bFxuICBsaXN0LXN0eWxlIG5vbmVcblxuYmxvY2txdW90ZSwgcVxuICBxdW90ZXMgbm9uZVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyXG4gIGNvbnRlbnQgJydcbiAgY29udGVudCBub25lXG5cbnRhYmxlXG4gIGJvcmRlci1jb2xsYXBzZSBjb2xsYXBzZVxuICBib3JkZXItc3BhY2luZyAwXG5cbipcbiAgYm94LXNpemluZyBib3JkZXItYm94XG4iLCIkd2lkdGhQYWdlTWF4ID0gbm9uZVxuJHdpZHRoUGFnZU1pbiA9IDBcbmh0bWxcbiAgaGVpZ2h0IDEwMCVcbmJvZHlcbiAgLm5vLWZsZXhib3ggJlxuICAgIG1pbi1oZWlnaHQgMTAwJVxuICAgIGhlaWdodCAxMDAlXG4gICAgZGlzcGxheSBibG9jayAhaW1wb3J0YW50XG4ucGFnZS13cmFwcGVyLCAucGFnZS1mb290ZXJcbiAgbWF4LXdpZHRoICR3aWR0aFBhZ2VNYXhcbiAgbWluLXdpZHRoICR3aWR0aFBhZ2VNaW5cbiAgd2lkdGggMTAwJVxuICBtYXJnaW4gMCBhdXRvXG4gIC5uby1mbGV4Ym94ICZcbiAgICB3aWR0aCBhdXRvXG4ucGFnZS13cmFwcGVyXG4gIGRpc3BsYXkgZmxleFxuICBmbGV4LWRpcmVjdGlvbiBjb2x1bW5cbiAgbWluLWhlaWdodCAxMDB2aFxuICAubHRlLWllLTExICYsIC5sdC1pZS0xMSAmXG4gICAgbWluLWhlaWdodCAwXG4gIC5uby1mbGV4Ym94ICZcbiAgICBkaXNwbGF5IGJsb2NrICFpbXBvcnRhbnRcbiAgICB3aWR0aCBhdXRvXG4gICAgbWluLWhlaWdodCAxMDAlXG4gICAgaGVpZ2h0IGF1dG8gIWltcG9ydGFudFxuICAgIGhlaWdodCAxMDAlXG4ucGFnZS1ib2R5XG4gIGZsZXggMVxuICAmLmZsZXgtbm9uZVxuICAgIGZsZXggbm9uZVxuIiwic21hbGwgPSA0MDBweFxubGFyZ2UgPSAxMDAwcHhcblxuLnNlY3Rpb24tbWFpblxuICBiYWNrZ3JvdW5kIHVybCgnLi4vaW1nL21haW4tYmcuanBnJykgbm8tcmVwZWF0IGNlbnRlci9jb3ZlclxuICBoZWlnaHQgNzh2aFxuXG4vL1xuLy8gLnRlc3Rcbi8vICAgYmFja2dyb3VuZC1jb2xvciAjYmFkYVxuLy8gICBwYWRkaW5nIDIwcHhcbi8vICAgQG1lZGlhIChtaW4td2lkdGggc21hbGwpXG4vLyAgICAgcGFkZGluZyBfYmV0d2VlbigyMHB4LCAyMDBweCwgc21hbGwsIGxhcmdlKVxuLy8gICBAbWVkaWEgKG1pbi13aWR0aCBsYXJnZSlcbi8vICAgICBwYWRkaW5nIDIwMHB4XG4iLCJAaW1wb3J0ICdzdHlsdXMtdGVtcGxhdGVzL2xpbmtlcidcbkBpbXBvcnQgJ3N0eWx1cy10ZW1wbGF0ZXMvaGVhZGVyJ1xuQGltcG9ydCAnc3R5bHVzLXRlbXBsYXRlcy9ib2R5J1xuQGltcG9ydCAnc3R5bHVzLXRlbXBsYXRlcy9mb290ZXInXG5cblxuXG5odG1sXG5cdC13ZWJraXQtZm9udC1zbW9vdGhpbmcgYW50aWFsaWFzZWRcblx0Ly8gZm9udC1mYW1pbHkgJ1JvYm90bycsIHNhbnMtc2VyaWZcbiJdfQ== */
